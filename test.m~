#Set the sizes on the image and frames
max_row = 1000;
max_col = 1000;
frame_size = 100;
flag = 0;
base_a = "A";
base_b = "B";
K = 2;
training_size = 8;
test_size = 6;

total = frame_size * K;
X = zeros(training_size, total);
#y = [2;2;2;2;2;2;2;2];
#Training
for iter = 1:training_size,
#Reads the Image
if flag == 0
    key = (iter + 1) / 2;
    key = num2str(key);
    file = strcat(base_a, key, ".jpeg");
    flag = 1;
else
    key = iter / 2;
    key = num2str(key);
    file = strcat(base_b, key, ".jpeg");
    flag = 0;
end;

img = imread (file);
rgb = img;
[x, map] = rgb2ind(img);
img = ind2gray (x, map);
[row,col] = size(img);
img = img / 255.0;
#Have to decide on C and sigma values
C = 1;
%sigma = 0.3;
sigma = 0.1;

#putting all features into a row vector
#but does this make sense? After applying PCA in the way we did apply
for index = 1:total
    X(iter,index) = img(index);
    end;
end;
#y = [1;0]; 
#X = [1,2;3,4]; 
C = 0.1;
model = svmTrain(X, y, C, @linearKernel);
#Testing
flag = 0;
X_test = zeros(test_size, total);
for iter = (training_size+1):(test_size+training_size),
#Reads the Image
if flag == 0
    key = (iter + 1) / 2;
    key = num2str(key);
    file = strcat(base_a, key, ".jpeg");
    flag = 1;
else
    key = iter / 2;
    key = num2str(key);
    file = strcat(base_b, key, ".jpeg");
    flag = 0;
end;

img = imread (file);
rgb = img;
[x, map] = rgb2ind(img);
img = ind2gray (x, map);
[row,col] = size(img);
img = img / 255.0;
for index = 1:total
    X_test((iter-8),index) = img(index);
    end;
end;
disp("predicting");
p = svmPredict(model, X);
disp(predictions);
##===========================================================================================================
